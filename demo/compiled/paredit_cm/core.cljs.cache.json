["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$paredit-cm.core","~:imports",null,"~:requires",["^ ","~$str","~$clojure.string","^:","^:","~$cljsjs.codemirror","^;","~$cljsjs.codemirror.mode.clojure","^<","~$cljsjs.codemirror.keymap.emacs","^="],"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$comment-whitespace",["^ ","^5","~$paredit-cm.core/comment-whitespace","~:file","src/paredit_cm/core.cljs","~:line",1385,"~:column",1,"~:end-line",1385,"~:end-column",24,"~:meta",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1385,"^E",6,"^F",1385,"^G",24],"~:tag","~$cljs.core/ISet"],"~$select-rest-of-string",["^ ","~:protocol-inline",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1270,"^E",7,"^F",1270,"^G",28,"~:arglists",["~#list",["~$quote",["^N",[["~$cm"]]]]],"~:doc","assumes you are in a string."],"^5","~$paredit-cm.core/select-rest-of-string","^C","src/paredit_cm/core.cljs","^G",28,"~:method-params",["^N",[["^P"]]],"~:protocol-impl",null,"~:arglists-meta",["^N",[null,null]],"^E",1,"~:variadic?",false,"^D",1270,"~:ret-tag","~$any","^F",1270,"~:max-fixed-arity",1,"~:fn-var",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes you are in a string."],"~$kill-prev-word-in-comment",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1473,"^E",7,"^F",1473,"^G",32,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment. kills text from i to the beginning of the previous\n  word in this comment"],"^5","~$paredit-cm.core/kill-prev-word-in-comment","^C","src/paredit_cm/core.cljs","^G",32,"^S",["^N",[["^P","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1473,"^W","^X","^F",1473,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment. kills text from i to the beginning of the previous\n  word in this comment"],"~$whitespace?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1167,"^E",7,"^F",1167,"^G",18,"^M",["^N",["^O",["^N",[["^P","~$cur"]]]]],"^Q","returns true if cursor indicates whitespace"],"^5","~$paredit-cm.core/whitespace?","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1167,"^W","~$boolean","^F",1167,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if cursor indicates whitespace"],"~$top-most-opener-candidate",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",2058,"^E",7,"^F",2058,"^G",32,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for the top-most opening bracket for the specified\n  location. returns the current cursor if there is no such anscestor"],"^5","~$paredit-cm.core/top-most-opener-candidate","^C","src/paredit_cm/core.cljs","^G",32,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",2058,"^W",["^4",[null,"~$function","~$clj-nil"]],"^F",2058,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for the top-most opening bracket for the specified\n  location. returns the current cursor if there is no such anscestor"],"~$selection-completely-non-code?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",846,"^E",7,"^F",846,"^G",37,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/selection-completely-non-code?","^C","src/paredit_cm/core.cljs","^G",37,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",846,"^W",["^4",["^14","^18"]],"^F",846,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$fwd-barf",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1899,"^E",7,"^F",1899,"^G",15,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for an ancestor closing bracket (parent,\n  grandparent, etc) that has a sibling to barf. returns a vector of\n  the cur to the right of such a bracket, the cur at the bracket, the\n  cur where the bracket should go, the text of the bracket, and\n  whether the operation causes the cursor to be moved. nil if there is\n  no such anscestor that can barf"],"^5","~$paredit-cm.core/fwd-barf","^C","src/paredit_cm/core.cljs","^G",15,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1899,"^W",["^4",["~$cljs.core/IVector","^17","^18"]],"^F",1899,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for an ancestor closing bracket (parent,\n  grandparent, etc) that has a sibling to barf. returns a vector of\n  the cur to the right of such a bracket, the cur at the bracket, the\n  cur where the bracket should go, the text of the bracket, and\n  whether the operation causes the cursor to be moved. nil if there is\n  no such anscestor that can barf"],"~$backward-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",29,"~:top-fn",["^ ","^V",false,"~:fixed-arity",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"~:export",true,"^E",16,"^D",2112,"^F",2112,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","backward-sexp exposed for keymap. seems part of emacs and not part\n  of paredit itself. but including it here since this will be used in\n  things other than emacs itself."],"^5","~$paredit-cm.core/backward-sexp","^C","src/paredit_cm/core.cljs","^G",29,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"~:methods",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",2112,"^F",2112,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","backward-sexp exposed for keymap. seems part of emacs and not part\n  of paredit itself. but including it here since this will be used in\n  things other than emacs itself."],"~$bkwd-kill-skippable-comment-char?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1493,"^E",7,"^F",1493,"^G",40,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"^5","~$paredit-cm.core/bkwd-kill-skippable-comment-char?","^C","src/paredit_cm/core.cljs","^G",40,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1493,"^W",["^4",["~$clj","^14","^1=","^X","~$cljs.core/MetaFn","^18"]],"^F",1493,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"~$start-of-token-at",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1468,"^E",7,"^F",1468,"^G",24,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]]],"^5","~$paredit-cm.core/start-of-token-at","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1468,"^W","~$number","^F",1468,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]]],"~$forward-barf-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",33,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1928,"^F",1928,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit forward-barf-sexp exposed for keymap."],"^5","~$paredit-cm.core/forward-barf-sexp","^C","src/paredit_cm/core.cljs","^G",33,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1928,"^F",1928,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit forward-barf-sexp exposed for keymap."],"~$forward-up-cur",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1645,"^E",7,"^F",1645,"^G",21,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","get cursor corresponding to paredit forward up","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/forward-up-cur","^C","src/paredit_cm/core.cljs","^G",21,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1645,"^F",1645,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","get cursor corresponding to paredit forward up"],"~$kill-rest-of-siblings",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1327,"^E",7,"^F",1327,"^G",28,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/kill-rest-of-siblings","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1327,"^W","^X","^F",1327,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$skip-trampoline-helper",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",311,"^E",7,"^F",311,"^G",29,"^M",["^N",["^O",["^N",[["^P","^12","~$sp","~$state","~$n"]]]]],"^Q","returns the cursor that satsifies skipping predicate 'sp' or nil if eof\n  reached. does this by making sp something we can trampoline. sp takes these\n  args: cm, cursor, state. counts down 'n' to 0 in order to guard against\n  infinite loops."],"^5","~$paredit-cm.core/skip-trampoline-helper","^C","src/paredit_cm/core.cljs","^G",29,"^S",["^N",[["^P","^12","^1R","^1S","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",311,"^W",["^4",[null,"^18"]],"^F",311,"^Y",5,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","^1R","^1S","~$n"]]]]],"^Q","returns the cursor that satsifies skipping predicate 'sp' or nil if eof\n  reached. does this by making sp something we can trampoline. sp takes these\n  args: cm, cursor, state. counts down 'n' to 0 in order to guard against\n  infinite loops."],"~$open-brace",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",249,"^E",16,"^F",249,"^G",26,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","open curly brace with matching close brace"],"^5","~$paredit-cm.core/open-brace","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",249,"^W","^X","^F",249,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","open curly brace with matching close brace"],"~$skip-left",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",361,"^E",7,"^F",361,"^G",16,"^M",["^N",["^O",["^N",[["^P","^1R"]]]]],"^Q","returns the cursor that satisfies sp or nil if either bof reached\n  or we found out sp could not be satisfied. see skip-to for more\n  info."],"^5","~$paredit-cm.core/skip-left","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P","^1R"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",361,"^W",["^4",["^X","^18"]],"^F",361,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^1R"]]]]],"^Q","returns the cursor that satisfies sp or nil if either bof reached\n  or we found out sp could not be satisfied. see skip-to for more\n  info."],"~$guard",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",309,"^E",7,"^F",309,"^G",12,"^M",["^N",["^O",["^N",[[]]]]]],"^5","~$paredit-cm.core/guard","^C","src/paredit_cm/core.cljs","^G",12,"^S",["^N",[[]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",309,"^W","^18","^F",309,"^Y",0,"^Z",true,"^M",["^N",["^O",["^N",[[]]]]]],"~$betw-code-and-comment?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1277,"^E",7,"^F",1277,"^G",29,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if code is to the left and whitespace* comment* is to the right."],"^5","~$paredit-cm.core/betw-code-and-comment?","^C","src/paredit_cm/core.cljs","^G",29,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1277,"^W",["^4",["~$seq","^14","^X","^18"]],"^F",1277,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if code is to the left and whitespace* comment* is to the right."],"~$get-string",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",124,"^E",7,"^F",124,"^G",17,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","gets the string of the current token","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/get-string","^C","src/paredit_cm/core.cljs","^G",17,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",124,"^F",124,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","gets the string of the current token"],"~$delete-selection",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1190,"^E",7,"^F",1190,"^G",23,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/delete-selection","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1190,"^W","^X","^F",1190,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$opener?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",80,"^E",7,"^F",80,"^G",14,"^M",["^N",["^O",["^N",[["~$s"]]]]]],"^5","~$paredit-cm.core/opener?","^C","src/paredit_cm/core.cljs","^G",14,"^S",["^N",[["~$s"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",80,"^W","^14","^F",80,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$s"]]]]]],"~$get-info",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",146,"^E",7,"^F",146,"^G",15,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","make info from CodeMirror more conveniently accessed by our code.\n  we'll use destructuring and just name what we rant. hypothesizing\n  that performance hit won't be that bad.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/get-info","^C","src/paredit_cm/core.cljs","^G",15,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["~$cljs.core/IMap","^18"]]]],"^D",146,"^F",146,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","make info from CodeMirror more conveniently accessed by our code.\n  we'll use destructuring and just name what we rant. hypothesizing\n  that performance hit won't be that bad."],"~$parent-closer-sp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",257,"^E",7,"^F",257,"^G",23,"^M",["^N",["^O",["^N",[["^P","^12","^1S"]]]]],"^Q","finds the *parent* closing bracket. behavior when used with skip: pushes\n  opening brackets that appear along the way on a stack. closing brackets pop\n  them off. stops when encountering a closing bracket while the stack is empty.\n  assuming the cm has matched brackets for now. moves to the right."],"^5","~$paredit-cm.core/parent-closer-sp","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["^P","^12","^1S"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",257,"^W",["^4",[null,"~$cljs.core/Keyword","^1J"]],"^F",257,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","^1S"]]]]],"^Q","finds the *parent* closing bracket. behavior when used with skip: pushes\n  opening brackets that appear along the way on a stack. closing brackets pop\n  them off. stops when encountering a closing bracket while the stack is empty.\n  assuming the cm has matched brackets for now. moves to the right."],"~$close-square",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",450,"^E",16,"^F",450,"^G",28,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/close-square","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",450,"^W",["^4",["^X","^18"]],"^F",450,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$end-of-next-sibling-sp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",516,"^E",7,"^F",516,"^G",29,"^M",["^N",["^O",["^N",[["^P","^12","~$stack"]]]]],"^Q","returns the cursor at the end of the sibling to the right or nil if\n  no sibling or eof. does not exit the containing form. does this by\n  skipping past any comments or whitespace, and branches depending on\n  whether an opening bracket or doublequote is encountered (sp\n  satisfied when encountering a closing bracket that empties the\n  stack) vs the beginning of a word (return token at the end of the\n  word). assuming the cm has matched brackets for now."],"^5","~$paredit-cm.core/end-of-next-sibling-sp","^C","src/paredit_cm/core.cljs","^G",29,"^S",["^N",[["^P","^12","^2A"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",516,"^W",["^4",[null,"^2=","^1J"]],"^F",516,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","^2A"]]]]],"^Q","returns the cursor at the end of the sibling to the right or nil if\n  no sibling or eof. does not exit the containing form. does this by\n  skipping past any comments or whitespace, and branches depending on\n  whether an opening bracket or doublequote is encountered (sp\n  satisfied when encountering a closing bracket that empties the\n  stack) vs the beginning of a word (return token at the end of the\n  word). assuming the cm has matched brackets for now."],"~$fwd",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1552,"^E",7,"^F",1552,"^G",10,"^M",["^N",["^O",["^N",[["^P","~$i","~$n"]]]]],"^Q","trampoline helper for forward. 'i' is the index we're inspecting. 'n' is how\n  many more calls we'll entertain before suspecting an infinite loop. first call\n  can pass in char count."],"^5","~$paredit-cm.core/fwd","^C","src/paredit_cm/core.cljs","^G",10,"^S",["^N",[["^P","~$i","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1552,"^W",["^4",["^X","^2=","^17","^18"]],"^F",1552,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i","~$n"]]]]],"^Q","trampoline helper for forward. 'i' is the index we're inspecting. 'n' is how\n  many more calls we'll entertain before suspecting an infinite loop. first call\n  can pass in char count."],"~$beginning-of-line?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1486,"^E",7,"^F",1486,"^G",25,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"^5","~$paredit-cm.core/beginning-of-line?","^C","src/paredit_cm/core.cljs","^G",25,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1486,"^W","^14","^F",1486,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"~$stringify-selection",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",744,"^E",7,"^F",744,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","turns selection into a string, escaping backslashes and doublequotes"],"^5","~$paredit-cm.core/stringify-selection","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",744,"^W","^X","^F",744,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","turns selection into a string, escaping backslashes and doublequotes"],"~$str-ends-on-another-line?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1241,"^E",7,"^F",1241,"^G",32,"^M",["^N",["^O",["^N",[["~$type","~$string"]]]]],"^Q","true if these values are from a string token that ends on another line"],"^5","~$paredit-cm.core/str-ends-on-another-line?","^C","src/paredit_cm/core.cljs","^G",32,"^S",["^N",[["^2J","^2K"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1241,"^W","^14","^F",1241,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^2J","^2K"]]]]],"^Q","true if these values are from a string token that ends on another line"],"~$bof?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",102,"^E",7,"^F",102,"^G",11,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if at beginning of file"],"^5","~$paredit-cm.core/bof?","^C","src/paredit_cm/core.cljs","^G",11,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",102,"^W","^14","^F",102,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if at beginning of file"],"~$skip",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",352,"^E",7,"^F",352,"^G",11,"^M",["^N",["^O",["^N",[["^P","^1R"],["^P","^1R","^12"]]]]],"^Q","returns the cursor that satisfies sp or nil if either eof reached\n  or we found out sp could not be satisfied. see skip-to for more\n  info.","^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P","^1R"],["^P","^1R","^12"]],"^M",["^N",[["^P","^1R"],["^P","^1R","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/skip","^C","src/paredit_cm/core.cljs","^G",11,"^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P","^1R"],["^P","^1R","^12"]],"^M",["^N",[["^P","^1R"],["^P","^1R","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P","^1R"],["^P","^1R","^12"]],"^T",null,"^1@",3,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",3,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",352,"^F",352,"^Y",3,"^Z",true,"^M",["^N",[["^P","^1R"],["^P","^1R","^12"]]],"^Q","returns the cursor that satisfies sp or nil if either eof reached\n  or we found out sp could not be satisfied. see skip-to for more\n  info."],"~$kill-from-to",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1302,"^E",7,"^F",1302,"^G",19,"^M",["^N",["^O",["^N",[["^P","~$i","~$j"]]]]]],"^5","~$paredit-cm.core/kill-from-to","^C","src/paredit_cm/core.cljs","^G",19,"^S",["^N",[["^P","~$i","~$j"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1302,"^W","^X","^F",1302,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i","~$j"]]]]]],"~$left",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",793,"^E",7,"^F",793,"^G",11,"^M",["^N",["^O",["^N",[["^P","~$c1","~$c2"]]]]],"^Q","given a pair of cursors c1 and c2, returns the left-most one"],"^5","~$paredit-cm.core/left","^C","src/paredit_cm/core.cljs","^G",11,"^S",["^N",[["^P","^2T","^2U"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",793,"^F",793,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^2T","^2U"]]]]],"^Q","given a pair of cursors c1 and c2, returns the left-most one"],"~$fwd-down",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1817,"^E",7,"^F",1817,"^G",15,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for the cursor where we'd be if we went forward\n  and then down into the next sibling that is available. nil if there is no\n  sibling to enter."],"^5","~$paredit-cm.core/fwd-down","^C","src/paredit_cm/core.cljs","^G",15,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1817,"^W",["^4",[null,"^17","^18"]],"^F",1817,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for the cursor where we'd be if we went forward\n  and then down into the next sibling that is available. nil if there is no\n  sibling to enter."],"~$non-word-chars",["^ ","^5","~$paredit-cm.core/non-word-chars","^C","src/paredit_cm/core.cljs","^D",1381,"^E",1,"^F",1381,"^G",20,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1381,"^E",6,"^F",1381,"^G",20],"^I",["^4",["^1F","^X","^J","^1G","^18"]]],"~$backward-up",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1674,"^F",1674,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit backward-up exposed for keymap."],"^5","~$paredit-cm.core/backward-up","^C","src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1674,"^F",1674,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit backward-up exposed for keymap."],"~$last-cur",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",139,"^E",7,"^F",139,"^G",15,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","returns the last cursor of a line","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/last-cur","^C","src/paredit_cm/core.cljs","^G",15,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",139,"^F",139,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","returns the last cursor of a line"],"~$not-code?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",844,"^E",7,"^F",844,"^G",16,"^M",["^N",["^O",["^N",[["^2J"]]]]]],"^5","~$paredit-cm.core/not-code?","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^2J"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",844,"^W","^14","^F",844,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^2J"]]]]]],"~$comment-dwim",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1051,"^E",16,"^F",1051,"^G",28,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/comment-dwim","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1051,"^W",["^4",["^X","^2=","^18"]],"^F",1051,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$in-code?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1022,"^E",7,"^F",1022,"^G",15,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if token is in the middle of code. assumes you've already ruled\n  out comments."],"^5","~$paredit-cm.core/in-code?","^C","src/paredit_cm/core.cljs","^G",15,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1022,"^W","^14","^F",1022,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if token is in the middle of code. assumes you've already ruled\n  out comments."],"~$get-type",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",117,"^E",7,"^F",117,"^G",15,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","get the type at the current cursor.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/get-type","^C","src/paredit_cm/core.cljs","^G",15,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",117,"^F",117,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","get the type at the current cursor."],"~$go-to-comment",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",912,"^E",7,"^F",912,"^G",20,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor to ;;X"],"^5","~$paredit-cm.core/go-to-comment","^C","src/paredit_cm/core.cljs","^G",20,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",912,"^W","^X","^F",912,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor to ;;X"],"~$bkwd",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1600,"^E",7,"^F",1600,"^G",11,"^M",["^N",["^O",["^N",[["^P","~$i","~$n"]]]]],"^Q","trampoline helper for backward. 'i' is the index we're inspecting. 'n' is\n  number of remaining calls before we suspect an infinite loop"],"^5","~$paredit-cm.core/bkwd","^C","src/paredit_cm/core.cljs","^G",11,"^S",["^N",[["^P","~$i","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1600,"^W",["^4",["^X","^2=","^17","^18"]],"^F",1600,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i","~$n"]]]]],"^Q","trampoline helper for backward. 'i' is the index we're inspecting. 'n' is\n  number of remaining calls before we suspect an infinite loop"],"~$forward-down",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1834,"^E",16,"^F",1834,"^G",28,"^1A",true,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/forward-down","^C","src/paredit_cm/core.cljs","^G",28,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1834,"^F",1834,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]]],"~$token-end-index",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",301,"^E",7,"^F",301,"^G",22,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","take an index. get its token. return index of that token's end."],"^5","~$paredit-cm.core/token-end-index","^C","src/paredit_cm/core.cljs","^G",22,"^S",["^N",[["^P","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",301,"^W",["^4",["^X","^18"]],"^F",301,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","take an index. get its token. return index of that token's end."],"~$line-is-whitespace?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",990,"^E",7,"^F",990,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if line is all whitespace"],"^5","~$paredit-cm.core/line-is-whitespace?","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",990,"^W","^14","^F",990,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if line is all whitespace"],"~$selection-info",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",807,"^E",7,"^F",807,"^G",21,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","like get-info but for the first selection. gets the cursor to the left of the\n  selection, the start, the end, the text selected, the starting and ending line\n  numbers. nil if nothing selected."],"^5","~$paredit-cm.core/selection-info","^C","src/paredit_cm/core.cljs","^G",21,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",807,"^W",["^4",["^1=","^18"]],"^F",807,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","like get-info but for the first selection. gets the cursor to the left of the\n  selection, the start, the end, the text selected, the starting and ending line\n  numbers. nil if nothing selected."],"~$code-to-left?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1036,"^E",7,"^F",1036,"^G",20,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if there's any code to the left of cursor. assumes you've\n  already ruled out comments so only looks for non nil tokens"],"^5","~$paredit-cm.core/code-to-left?","^C","src/paredit_cm/core.cljs","^G",20,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1036,"^W",["^4",["^21","^X","^18"]],"^F",1036,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if there's any code to the left of cursor. assumes you've\n  already ruled out comments so only looks for non nil tokens"],"~$kill-next-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1409,"^E",7,"^F",1409,"^G",21,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment or a string. kills text from i to the end\n  of the next word in this comment/string"],"^5","~$paredit-cm.core/kill-next-word","^C","src/paredit_cm/core.cljs","^G",21,"^S",["^N",[["^P","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1409,"^W","^X","^F",1409,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment or a string. kills text from i to the end\n  of the next word in this comment/string"],"~$token-end",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",295,"^E",7,"^F",295,"^G",16,"^M",["^N",["^O",["^N",[["^P","^12"],["^P","^12","~$offset"]]]]],"^Q","returns the cursor for the end of the current token","^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P","^12"],["^P","^12","^3L"]],"^M",["^N",[["^P","^12"],["^P","^12","^3L"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/token-end","^C","src/paredit_cm/core.cljs","^G",16,"^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P","^12"],["^P","^12","^3L"]],"^M",["^N",[["^P","^12"],["^P","^12","^3L"]]],"^U",["^N",[null,null]]],"^S",[["^P","^12"],["^P","^12","^3L"]],"^T",null,"^1@",3,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",3,"^V",false,"^I","^X"]],"^D",295,"^F",295,"^Y",3,"^Z",true,"^M",["^N",[["^P","^12"],["^P","^12","^3L"]]],"^Q","returns the cursor for the end of the current token"],"~$insert",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",210,"^E",7,"^F",210,"^G",13,"^M",["^N",["^O",["^N",[["^P","~$text"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]]]]],"^Q","insert text at current cursor. move cursor to the end of inserted text minus\n  optional offset. the offset is for moving the cursor immediately after the\n  insert and before returning. example: inserting a pair of brackets and placing\n  the cursor inside the pair. this returns the new cursor.","^1?",["^ ","^V",false,"^1@",4,"^Y",4,"^S",[["^P","^3O"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]],"^M",["^N",[["^P","^3O"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]]],"^U",["^N",[null,null,null]]]],"^5","~$paredit-cm.core/insert","^C","src/paredit_cm/core.cljs","^G",13,"^1?",["^ ","^V",false,"^1@",4,"^Y",4,"^S",[["^P","^3O"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]],"^M",["^N",[["^P","^3O"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]]],"^U",["^N",[null,null,null]]],"^S",[["^P","^3O"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]],"^T",null,"^1@",4,"^U",["^N",[null,null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",3,"^V",false,"^I","^X"],["^ ","^1@",4,"^V",false,"^I","^X"]],"^D",210,"^F",210,"^Y",4,"^Z",true,"^M",["^N",[["^P","^3O"],["^P","^3O","^3L"],["^P","^3O","^3L","^12"]]],"^Q","insert text at current cursor. move cursor to the end of inserted text minus\n  optional offset. the offset is for moving the cursor immediately after the\n  insert and before returning. example: inserting a pair of brackets and placing\n  the cursor inside the pair. this returns the new cursor."],"~$word?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",477,"^E",7,"^F",477,"^G",12,"^M",["^N",["^O",["^N",[["^2J"]]]]]],"^5","~$paredit-cm.core/word?","^C","src/paredit_cm/core.cljs","^G",12,"^S",["^N",[["^2J"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",477,"^W","^14","^F",477,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^2J"]]]]]],"~$insert-line-comment-here",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1013,"^E",7,"^F",1013,"^G",31,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","creates and indents a ;; comment on this line"],"^5","~$paredit-cm.core/insert-line-comment-here","^C","src/paredit_cm/core.cljs","^G",31,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1013,"^W","^X","^F",1013,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","creates and indents a ;; comment on this line"],"~$forward-up",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1657,"^F",1657,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit forward-up exposed for keymap."],"^5","~$paredit-cm.core/forward-up","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1657,"^F",1657,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit forward-up exposed for keymap."],"~$in-escaped-char?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",189,"^E",7,"^F",189,"^G",23,"^M",["^N",["^O",["^N",[["^P","^12"],["^P","^12","^3L"]]]]],"^Q","returns true if backslash is to the left and cursor is on an escaped char","^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P","^12"],["^P","^12","^3L"]],"^M",["^N",[["^P","^12"],["^P","^12","^3L"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/in-escaped-char?","^C","src/paredit_cm/core.cljs","^G",23,"^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P","^12"],["^P","^12","^3L"]],"^M",["^N",[["^P","^12"],["^P","^12","^3L"]]],"^U",["^N",[null,null]]],"^S",[["^P","^12"],["^P","^12","^3L"]],"^T",null,"^1@",3,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",3,"^V",false,"^I","^14"]],"^D",189,"^F",189,"^Y",3,"^Z",true,"^M",["^N",[["^P","^12"],["^P","^12","^3L"]]],"^Q","returns true if backslash is to the left and cursor is on an escaped char"],"~$kill-rest-of-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1323,"^E",7,"^F",1323,"^G",24,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/kill-rest-of-line","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1323,"^W","^X","^F",1323,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$start-of-prev-sibling-sp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",620,"^E",7,"^F",620,"^G",31,"^M",["^N",["^O",["^N",[["^P","^12","^2A"]]]]],"^Q","returns the cursor at the start of the sibling to the left or nil\n  if no sibling or eof. does not exit the containing form. does this\n  by skipping past any comments or whitespace, and branches depending\n  on whether a bracket or doublequote is encountered (sp satisfied\n  when encountering an opening bracket that empties the stack) vs the\n  beginning of a word (return token at the start of the\n  word). assuming the cm has matched brackets for now."],"^5","~$paredit-cm.core/start-of-prev-sibling-sp","^C","src/paredit_cm/core.cljs","^G",31,"^S",["^N",[["^P","^12","^2A"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",620,"^W",["^4",[null,"^2=","^1J"]],"^F",620,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","^2A"]]]]],"^Q","returns the cursor at the start of the sibling to the left or nil\n  if no sibling or eof. does not exit the containing form. does this\n  by skipping past any comments or whitespace, and branches depending\n  on whether a bracket or doublequote is encountered (sp satisfied\n  when encountering an opening bracket that empties the stack) vs the\n  beginning of a word (return token at the start of the\n  word). assuming the cm has matched brackets for now."],"~$index-of-next-non",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1378,"^E",7,"^F",1378,"^G",24,"^M",["^N",["^O",["^N",[["^P","~$i","~$chars"]]]]]],"^5","~$paredit-cm.core/index-of-next-non","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P","~$i","^42"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1378,"^W","^X","^F",1378,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i","^42"]]]]]],"~$index-of-next",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1375,"^E",7,"^F",1375,"^G",20,"^M",["^N",["^O",["^N",[["^P","~$i","^42"]]]]]],"^5","~$paredit-cm.core/index-of-next","^C","src/paredit_cm/core.cljs","^G",20,"^S",["^N",[["^P","~$i","^42"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1375,"^W","^X","^F",1375,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i","^42"]]]]]],"~$raise-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1770,"^F",1770,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit raise-sexp exposed for keymap."],"^5","~$paredit-cm.core/raise-sexp","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1770,"^F",1770,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit raise-sexp exposed for keymap."],"~$move-left",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1199,"^E",7,"^F",1199,"^G",16,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/move-left","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1199,"^W","^X","^F",1199,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$index",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",97,"^E",7,"^F",97,"^G",12,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","get the index i for the cursor's position","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/index","^C","src/paredit_cm/core.cljs","^G",12,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",97,"^F",97,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","get the index i for the cursor's position"],"~$backward-delete",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1217,"^E",16,"^F",1217,"^G",31,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit backward delete exposed for keymap"],"^5","~$paredit-cm.core/backward-delete","^C","src/paredit_cm/core.cljs","^G",31,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1217,"^W",["^4",["^X","^2="]],"^F",1217,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit backward delete exposed for keymap"],"~$select-rest-of-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",970,"^E",7,"^F",970,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","selects from current position to the end of the line"],"^5","~$paredit-cm.core/select-rest-of-line","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",970,"^W","^X","^F",970,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","selects from current position to the end of the line"],"~$insert-spaces-to-col-40",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",923,"^E",7,"^F",923,"^G",30,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","presses spacebar until we are at col 40"],"^5","~$paredit-cm.core/insert-spaces-to-col-40","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",923,"^W",["^4",["^X","^18"]],"^F",923,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","presses spacebar until we are at col 40"],"~$split-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",2019,"^F",2019,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit split-sexp exposed for keymap."],"^5","~$paredit-cm.core/split-sexp","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",2019,"^F",2019,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit split-sexp exposed for keymap."],"~$is-bracket-type?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",83,"^E",7,"^F",83,"^G",23,"^M",["^N",["^O",["^N",[["~$t"]]]]]],"^5","~$paredit-cm.core/is-bracket-type?","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["~$t"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",83,"^W",["^4",[null,"^14"]],"^F",83,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$t"]]]]]],"~$closing-doublequote?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1120,"^E",7,"^F",1120,"^G",27,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if cur is just to the right of a closing doublequote"],"^5","~$paredit-cm.core/closing-doublequote?","^C","src/paredit_cm/core.cljs","^G",27,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1120,"^W","^14","^F",1120,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if cur is just to the right of a closing doublequote"],"~$backward-down",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1857,"^E",16,"^F",1857,"^G",29,"^1A",true,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/backward-down","^C","src/paredit_cm/core.cljs","^G",29,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1857,"^F",1857,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]]],"~$in-a-word?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",489,"^E",7,"^F",489,"^G",17,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","true if in a word AND not at the end of that word. false if in whitespace or\n  a string or a comment or at a bracket."],"^5","~$paredit-cm.core/in-a-word?","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",489,"^W","^14","^F",489,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","true if in a word AND not at the end of that word. false if in whitespace or\n  a string or a comment or at a bracket."],"~$backward-kill-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1542,"^E",16,"^F",1542,"^G",34,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit backward-kill-word exposed for keymap."],"^5","~$paredit-cm.core/backward-kill-word","^C","src/paredit_cm/core.cljs","^G",34,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1542,"^W","^X","^F",1542,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit backward-kill-word exposed for keymap."],"~$splice-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1708,"^F",1708,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit splice-sexp exposed for keymap. unlike emacs' version, this does not\n  splice a string by dropping its double-quotes."],"^5","~$paredit-cm.core/splice-sexp","^C","src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1708,"^F",1708,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit splice-sexp exposed for keymap. unlike emacs' version, this does not\n  splice a string by dropping its double-quotes."],"~$opening-delim?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1129,"^E",7,"^F",1129,"^G",21,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true for opening brackets and for opening double-quotes"],"^5","~$paredit-cm.core/opening-delim?","^C","src/paredit_cm/core.cljs","^G",21,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1129,"^W",["^4",[null,"^14"]],"^F",1129,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true for opening brackets and for opening double-quotes"],"~$forward-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",28,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",2099,"^F",2099,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","forward-sexp exposed for keymap. seems part of emacs and not part\n  of paredit itself. but including it here since this will be used in\n  things other than emacs itself."],"^5","~$paredit-cm.core/forward-sexp","^C","src/paredit_cm/core.cljs","^G",28,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",2099,"^F",2099,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","forward-sexp exposed for keymap. seems part of emacs and not part\n  of paredit itself. but including it here since this will be used in\n  things other than emacs itself."],"~$escaped-char-to-right?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",202,"^E",7,"^F",202,"^G",29,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if an escaped char and its backslash is to the right"],"^5","~$paredit-cm.core/escaped-char-to-right?","^C","src/paredit_cm/core.cljs","^G",29,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",202,"^W","^14","^F",202,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if an escaped char and its backslash is to the right"],"~$move-to-end-of-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",956,"^E",7,"^F",956,"^G",26,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","moves cursor to end of last non-whitespace token on a line.\n  returns a vector of new index, new ch, and new cursor.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/move-to-end-of-line","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^1="]],"^D",956,"^F",956,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","moves cursor to end of last non-whitespace token on a line.\n  returns a vector of new index, new ch, and new cursor."],"~$selection-completely-satisfies-pred?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",834,"^E",7,"^F",834,"^G",43,"^M",["^N",["^O",["^N",[["^P","~$pred"]]]]],"^Q","true if every position's type satisfies pred, for the entire (first)\n  selection"],"^5","~$paredit-cm.core/selection-completely-satisfies-pred?","^C","src/paredit_cm/core.cljs","^G",43,"^S",["^N",[["^P","^4Y"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",834,"^W",["^4",["^14","^18"]],"^F",834,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^4Y"]]]]],"^Q","true if every position's type satisfies pred, for the entire (first)\n  selection"],"~$close-round",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$s"]],"^M",["^N",[["^P"],["^P","~$s"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",416,"^F",416,"^M",["^N",["^O",["^N",[["^P"],["^P","~$s"]]]]],"^Q","paredit-close-round exposed for keymap. skips to end of current\n  list even if it ends with ] or }. but if you're in a string or\n  comment then this just inserts the bracket. requires CodeMirror\n  mode's parser uses state with indentStack because that's how we\n  can tell we've reached the end of a top level form and avoid\n  entering the next top level form. 's' is the character as a string."],"^5","~$paredit-cm.core/close-round","^C","src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$s"]],"^M",["^N",[["^P"],["^P","~$s"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","~$s"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",416,"^F",416,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","~$s"]]],"^Q","paredit-close-round exposed for keymap. skips to end of current\n  list even if it ends with ] or }. but if you're in a string or\n  comment then this just inserts the bracket. requires CodeMirror\n  mode's parser uses state with indentStack because that's how we\n  can tell we've reached the end of a top level form and avoid\n  entering the next top level form. 's' is the character as a string."],"~$just-one-space",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",381,"^E",7,"^F",381,"^G",21,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"],["^P","^12","~$indent-after"]]]]],"^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P"],["^P","^12"],["^P","^12","^52"]],"^M",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]],"^U",["^N",[null,null,null]]]],"^5","~$paredit-cm.core/just-one-space","^C","src/paredit_cm/core.cljs","^G",21,"^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P"],["^P","^12"],["^P","^12","^52"]],"^M",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]],"^U",["^N",[null,null,null]]],"^S",[["^P"],["^P","^12"],["^P","^12","^52"]],"^T",null,"^1@",3,"^U",["^N",[null,null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",3,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",381,"^F",381,"^Y",3,"^Z",true,"^M",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]]],"~$comment-selection",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",894,"^E",7,"^F",894,"^G",24,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/comment-selection","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",894,"^W","^18","^F",894,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$fwd-slurp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1788,"^E",7,"^F",1788,"^G",16,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for an ancestor closing bracket (parent,\n  grandparent, etc) that has a sibling to slurp. returns a vector of the cur to\n  the right of such a bracket, the cur to the right of the sibling that will be\n  slurped, the string of the bracket to move. nil if there is no such anscestor\n  that can slurp."],"^5","~$paredit-cm.core/fwd-slurp","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1788,"^W",["^4",["^1=","^17","^18"]],"^F",1788,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for an ancestor closing bracket (parent,\n  grandparent, etc) that has a sibling to slurp. returns a vector of the cur to\n  the right of such a bracket, the cur to the right of the sibling that will be\n  slurped, the string of the bracket to move. nil if there is no such anscestor\n  that can slurp."],"~$right-cur-would-be-whitespace?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1084,"^E",7,"^F",1084,"^G",37,"^M",["^N",["^O",["^N",[["^P","^12","~$right-cur"]]]]],"^Q","true if this position would be whitespace if we pressed the spacebar."],"^5","~$paredit-cm.core/right-cur-would-be-whitespace?","^C","src/paredit_cm/core.cljs","^G",37,"^S",["^N",[["^P","^12","^59"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1084,"^W","^14","^F",1084,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","^59"]]]]],"^Q","true if this position would be whitespace if we pressed the spacebar."],"~$delete-to-end-of-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",975,"^E",7,"^F",975,"^G",28,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","deletes from current position to the end of the line"],"^5","~$paredit-cm.core/delete-to-end-of-line","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",975,"^W","^X","^F",975,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","deletes from current position to the end of the line"],"~$skip-trampoline-helper-left",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",332,"^E",7,"^F",332,"^G",34,"^M",["^N",["^O",["^N",[["^P","^12","^1R","^1S","~$n"]]]]],"^Q","like skip-trampoline-helper but in the opposite direction."],"^5","~$paredit-cm.core/skip-trampoline-helper-left","^C","src/paredit_cm/core.cljs","^G",34,"^S",["^N",[["^P","^12","^1R","^1S","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",332,"^W",["^4",[null,"^18"]],"^F",332,"^Y",5,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","^1R","^1S","~$n"]]]]],"^Q","like skip-trampoline-helper but in the opposite direction."],"~$close-round-and-newline",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",440,"^E",16,"^F",440,"^G",39,"^1A",true,"^M",["^N",["^O",["^N",[["^P"],["^P","~$s"]]]]],"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$s"]],"^M",["^N",[["^P"],["^P","~$s"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/close-round-and-newline","^C","src/paredit_cm/core.cljs","^G",39,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$s"]],"^M",["^N",[["^P"],["^P","~$s"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","~$s"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",440,"^F",440,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","~$s"]]]],"~$bracket?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1174,"^E",7,"^F",1174,"^G",15,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if cursor info indicates opening/closing bracket or quote"],"^5","~$paredit-cm.core/bracket?","^C","src/paredit_cm/core.cljs","^G",15,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1174,"^W",["^4",[null,"^14"]],"^F",1174,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if cursor info indicates opening/closing bracket or quote"],"~$line-length",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",129,"^E",7,"^F",129,"^G",18,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","gets the length of the current line","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/line-length","^C","src/paredit_cm/core.cljs","^G",18,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^1J","^18"]]]],"^D",129,"^F",129,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","gets the length of the current line"],"~$eof?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",107,"^E",7,"^F",107,"^G",11,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if at end of file"],"^5","~$paredit-cm.core/eof?","^C","src/paredit_cm/core.cljs","^G",11,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",107,"^W","^14","^F",107,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if at end of file"],"~$idx-of-next",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1368,"^E",7,"^F",1368,"^G",18,"^M",["^N",["^O",["^N",[["^P","~$i","^42","~$member","~$max"]]]]]],"^5","~$paredit-cm.core/idx-of-next","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P","~$i","^42","^5H","^5I"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1368,"^W",["^4",[null,"^17","^18"]],"^F",1368,"^Y",5,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i","^42","^5H","^5I"]]]]]],"~$pair",["^ ","^5","~$paredit-cm.core/pair","^C","src/paredit_cm/core.cljs","^D",72,"^E",1,"^F",72,"^G",10,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",72,"^E",6,"^F",72,"^G",10],"^I","^2:"],"~$start-of-prev-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1398,"^E",7,"^F",1398,"^G",25,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment or a string. returns the i at the start of\n  the prev word (going to the left) in this comment/string"],"^5","~$paredit-cm.core/start-of-prev-word","^C","src/paredit_cm/core.cljs","^G",25,"^S",["^N",[["^P","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1398,"^W","^1J","^F",1398,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment or a string. returns the i at the start of\n  the prev word (going to the left) in this comment/string"],"~$forward",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1589,"^E",16,"^F",1589,"^G",23,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit forward exposed for keymap. find the first thing that isn't\n  whitespace or comment. if it is a closing bracket, step past it. otherwise\n  skip over the thing."],"^5","~$paredit-cm.core/forward","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1589,"^W","^X","^F",1589,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit forward exposed for keymap. find the first thing that isn't\n  whitespace or comment. if it is a closing bracket, step past it. otherwise\n  skip over the thing."],"~$indent-current-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",910,"^E",7,"^F",910,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/indent-current-line","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",910,"^W","^X","^F",910,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$kill",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1341,"^E",16,"^F",1341,"^G",20,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit kill exposed for keymap."],"^5","~$paredit-cm.core/kill","^C","src/paredit_cm/core.cljs","^G",20,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1341,"^W",["^4",["^X","^18"]],"^F",1341,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit kill exposed for keymap."],"~$split-string",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",2011,"^E",7,"^F",2011,"^G",19,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","split sexp for \"strings like this\""],"^5","~$paredit-cm.core/split-string","^C","src/paredit_cm/core.cljs","^G",19,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",2011,"^W","^X","^F",2011,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","split sexp for \"strings like this\""],"~$kill-region",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1307,"^E",7,"^F",1307,"^G",18,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/kill-region","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1307,"^W","^X","^F",1307,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$indent-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",184,"^E",7,"^F",184,"^G",18,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","indent the current line"],"^5","~$paredit-cm.core/indent-line","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",184,"^W","^X","^F",184,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","indent the current line"],"~$forward-slurp-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",34,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1802,"^F",1802,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit forward-slurp-sexp exposed for keymap."],"^5","~$paredit-cm.core/forward-slurp-sexp","^C","src/paredit_cm/core.cljs","^G",34,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1802,"^F",1802,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit forward-slurp-sexp exposed for keymap."],"~$semicolons",["^ ","^5","~$paredit-cm.core/semicolons","^C","src/paredit_cm/core.cljs","^D",1384,"^E",1,"^F",1384,"^G",16,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1384,"^E",6,"^F",1384,"^G",16],"^I","^J"],"~$comment-start",["^ ","^5","~$paredit-cm.core/comment-start","^C","src/paredit_cm/core.cljs","^D",1383,"^E",1,"^F",1383,"^G",19,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1383,"^E",6,"^F",1383,"^G",19],"^I",["^4",["^1F","^X","^J","^1G","^18"]]],"~$get-types",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",823,"^E",7,"^F",823,"^G",16,"^M",["^N",["^O",["^N",[["^P","^2T","^2U"]]]]],"^Q","get the types from cursors c1 to c2. assumes 1 is to the left of 2 and not\n  vice versa."],"^5","~$paredit-cm.core/get-types","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P","^2T","^2U"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",823,"^W","^1F","^F",823,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^2T","^2U"]]]]],"^Q","get the types from cursors c1 to c2. assumes 1 is to the left of 2 and not\n  vice versa."],"~$join-sexps",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",2031,"^F",2031,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit join-sexps exposed for keymap."],"^5","~$paredit-cm.core/join-sexps","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",2031,"^F",2031,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit join-sexps exposed for keymap."],"~$split-form",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1980,"^E",7,"^F",1980,"^G",17,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","split sexp for (forms like this)"],"^5","~$paredit-cm.core/split-form","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1980,"^W",["^4",["^X","^18"]],"^F",1980,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","split sexp for (forms like this)"],"~$escape-string",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",734,"^E",7,"^F",734,"^G",20,"^M",["^N",["^O",["^N",[["~$s"]]]]],"^Q","escapes a string, replacing backslashes and doublequotes. wraps\n  result in a new pair of doublequotes."],"^5","~$paredit-cm.core/escape-string","^C","src/paredit_cm/core.cljs","^G",20,"^S",["^N",[["~$s"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",734,"^W","^2K","^F",734,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$s"]]]]],"^Q","escapes a string, replacing backslashes and doublequotes. wraps\n  result in a new pair of doublequotes."],"~$exit-string",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",757,"^E",7,"^F",757,"^G",18,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor right, out of the current string"],"^5","~$paredit-cm.core/exit-string","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",757,"^W",["^4",["^X","^18"]],"^F",757,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor right, out of the current string"],"~$kill-pair",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1313,"^E",7,"^F",1313,"^G",16,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes a pair of brackets surround the cursor. deletes the pair."],"^5","~$paredit-cm.core/kill-pair","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1313,"^W","^X","^F",1313,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes a pair of brackets surround the cursor. deletes the pair."],"~$doublequote",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",452,"^E",16,"^F",452,"^G",27,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/doublequote","^C","src/paredit_cm/core.cljs","^G",27,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",452,"^W","^X","^F",452,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$closers",["^ ","^5","~$paredit-cm.core/closers","^C","src/paredit_cm/core.cljs","^D",70,"^E",1,"^F",70,"^G",13,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",70,"^E",6,"^F",70,"^G",13],"^I","^J"],"~$go-to-end-of-string",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1247,"^E",7,"^F",1247,"^G",26,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","moves cursor to end of the string you're in (but still inside the\n  closing doublequote). assumes you're in a string. the end could be\n  on a different line from where you start","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/go-to-end-of-string","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",[null,"^X"]]]],"^D",1247,"^F",1247,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","moves cursor to end of the string you're in (but still inside the\n  closing doublequote). assumes you're in a string. the end could be\n  on a different line from where you start"],"~$splice-sexp-killing-forward",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",43,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1748,"^F",1748,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit splice-sexp-killing-forward exposed for keymap. like emacs' version,\n  this doesn't actually kill to the clipboard. it just deletes. but unlink\n  emacs, this does not splice a string by dropping its double-quotes."],"^5","~$paredit-cm.core/splice-sexp-killing-forward","^C","src/paredit_cm/core.cljs","^G",43,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1748,"^F",1748,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit splice-sexp-killing-forward exposed for keymap. like emacs' version,\n  this doesn't actually kill to the clipboard. it just deletes. but unlink\n  emacs, this does not splice a string by dropping its double-quotes."],"~$move",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1153,"^E",7,"^F",1153,"^G",11,"^M",["^N",["^O",["^N",[["^P","^3L"]]]]],"^Q","moves the cursor by 'offset' places, negative for left. returns the cursor."],"^5","~$paredit-cm.core/move","^C","src/paredit_cm/core.cljs","^G",11,"^S",["^N",[["^P","^3L"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1153,"^W","^X","^F",1153,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^3L"]]]]],"^Q","moves the cursor by 'offset' places, negative for left. returns the cursor."],"~$create-comment-at-end",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",980,"^E",7,"^F",980,"^G",28,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","starts a ; comment at column 40 or greater and moves to it."],"^5","~$paredit-cm.core/create-comment-at-end","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",980,"^W","^X","^F",980,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","starts a ; comment at column 40 or greater and moves to it."],"~$opening-delim-for-empty-pair?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1136,"^E",7,"^F",1136,"^G",36,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true for an opening bracket of an empty pair ()"],"^5","~$paredit-cm.core/opening-delim-for-empty-pair?","^C","src/paredit_cm/core.cljs","^G",36,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1136,"^W",["^4",[null,"^14","^X","^18"]],"^F",1136,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true for an opening bracket of an empty pair ()"],"~$skip-to",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",392,"^E",7,"^F",392,"^G",14,"^M",["^N",["^O",["^N",[["^P","^1R"]]]]],"^Q","moves to the cursor that satisfies sp or doesn't move if eof reached.\n  starts at current cursor for cm. sp stands for 'skipping predicate'\n  which returns:\n  - :yes if sp is satisfied.\n  - :stop if we know we will not be satisfied with any future result.\n  - :left if the cursor to the left is what we want.\n  - new non-nil state if not satisfied. this state is used with the\n  next iteration after we skip to the end of the current token. an sp\n  takes cm, cursor, state."],"^5","~$paredit-cm.core/skip-to","^C","src/paredit_cm/core.cljs","^G",14,"^S",["^N",[["^P","^1R"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",392,"^W",["^4",["^X","^18"]],"^F",392,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^1R"]]]]],"^Q","moves to the cursor that satisfies sp or doesn't move if eof reached.\n  starts at current cursor for cm. sp stands for 'skipping predicate'\n  which returns:\n  - :yes if sp is satisfied.\n  - :stop if we know we will not be satisfied with any future result.\n  - :left if the cursor to the left is what we want.\n  - new non-nil state if not satisfied. this state is used with the\n  next iteration after we skip to the end of the current token. an sp\n  takes cm, cursor, state."],"~$append",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",880,"^E",7,"^F",880,"^G",13,"^M",["^N",["^O",["^N",[["~$ch","~$s","~$tok"]]]]],"^Q","returns the result of appending the applicable part of 'tok' to\n  's'. this is for collecting all the text on a line after 'ch'"],"^5","~$paredit-cm.core/append","^C","src/paredit_cm/core.cljs","^G",13,"^S",["^N",[["^6R","~$s","^6S"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",880,"^W",["^4",[null,"^2K"]],"^F",880,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^6R","~$s","^6S"]]]]],"^Q","returns the result of appending the applicable part of 'tok' to\n  's'. this is for collecting all the text on a line after 'ch'"],"~$new-line-and-comment",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1002,"^E",7,"^F",1002,"^G",27,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","creates and indents a ;; comment on a new line"],"^5","~$paredit-cm.core/new-line-and-comment","^C","src/paredit_cm/core.cljs","^G",27,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1002,"^W","^X","^F",1002,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","creates and indents a ;; comment on a new line"],"~$kill-next-sibling",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1331,"^E",7,"^F",1331,"^G",24,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","kills the next sibling to the right of the cursor"],"^5","~$paredit-cm.core/kill-next-sibling","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1331,"^W",["^4",["^X","^18"]],"^F",1331,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","kills the next sibling to the right of the cursor"],"~$delete",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1159,"^E",7,"^F",1159,"^G",13,"^M",["^N",["^O",["^N",[["^P"],["^P","~$n"]]]]],"^Q","delete 1 or n char to right","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$n"]],"^M",["^N",[["^P"],["^P","~$n"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/delete","^C","src/paredit_cm/core.cljs","^G",13,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$n"]],"^M",["^N",[["^P"],["^P","~$n"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","~$n"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1159,"^F",1159,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","~$n"]]],"^Q","delete 1 or n char to right"],"~$move-past-parent-closer",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",407,"^E",7,"^F",407,"^G",30,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor to just outside the closing bracket, or if there is\n  none then doesn't move at all."],"^5","~$paredit-cm.core/move-past-parent-closer","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",407,"^W",["^4",["^X","^18"]],"^F",407,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor to just outside the closing bracket, or if there is\n  none then doesn't move at all."],"~$backward",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1636,"^E",16,"^F",1636,"^G",24,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit backward exposed for keymap."],"^5","~$paredit-cm.core/backward","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1636,"^W","^X","^F",1636,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit backward exposed for keymap."],"~$go-to-comment-and-indent",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",930,"^E",7,"^F",930,"^G",31,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor to the comment on the line and makes sure the comment\n  starts on column 40 or greater. assumes last token is a comment"],"^5","~$paredit-cm.core/go-to-comment-and-indent","^C","src/paredit_cm/core.cljs","^G",31,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",930,"^W","^X","^F",930,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","moves cursor to the comment on the line and makes sure the comment\n  starts on column 40 or greater. assumes last token is a comment"],"~$cursor",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",92,"^E",7,"^F",92,"^G",13,"^M",["^N",["^O",["^N",[["^P"],["^P","~$i"]]]]],"^Q","get cur, the position of the cursor","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$i"]],"^M",["^N",[["^P"],["^P","~$i"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/cursor","^C","src/paredit_cm/core.cljs","^G",13,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$i"]],"^M",["^N",[["^P"],["^P","~$i"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","~$i"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",92,"^F",92,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","~$i"]]],"^Q","get cur, the position of the cursor"],"~$to-comment",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",849,"^E",7,"^F",849,"^G",17,"^M",["^N",["^O",["^N",[["~$s","~$postscript"]]]]],"^Q","starts each line in 's' with ;; and appends 'post-script'"],"^5","~$paredit-cm.core/to-comment","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["~$s","^78"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",849,"^W","^2K","^F",849,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["~$s","^78"]]]]],"^Q","starts each line in 's' with ;; and appends 'post-script'"],"~$reindent-defun",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",30,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",2074,"^F",2074,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit reindent-defun exposed for keymap."],"^5","~$paredit-cm.core/reindent-defun","^C","src/paredit_cm/core.cljs","^G",30,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",2074,"^F",2074,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit reindent-defun exposed for keymap."],"~$bkwd-slurp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1867,"^E",7,"^F",1867,"^G",17,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampolin-able that looks for an ancestor opening bracket (parent,\n  grandparent, etc) that has a sibling to slurp. returns a vector of the cur to\n  the left of such a bracket, the cur to the left of the sibling that will be\n  slurped, the string of the bracket to move. nil if there is no such anscestor\n  that can slurp."],"^5","~$paredit-cm.core/bkwd-slurp","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1867,"^W",["^4",["^1=","^17","^18"]],"^F",1867,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampolin-able that looks for an ancestor opening bracket (parent,\n  grandparent, etc) that has a sibling to slurp. returns a vector of the cur to\n  the left of such a bracket, the cur to the left of the sibling that will be\n  slurped, the string of the bracket to move. nil if there is no such anscestor\n  that can slurp."],"~$get-text-to-end-of-line",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",888,"^E",7,"^F",888,"^G",30,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"^5","~$paredit-cm.core/get-text-to-end-of-line","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",888,"^W",["^4",[null,"^X"]],"^F",888,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"~$delete-whitespace",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",369,"^E",7,"^F",369,"^G",24,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]]]],"^Q","if cur is in whitespace, deletes it optionally without ruining indentation.","^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P"],["^P","^12"],["^P","^12","^52"]],"^M",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]],"^U",["^N",[null,null,null]]]],"^5","~$paredit-cm.core/delete-whitespace","^C","src/paredit_cm/core.cljs","^G",24,"^1?",["^ ","^V",false,"^1@",3,"^Y",3,"^S",[["^P"],["^P","^12"],["^P","^12","^52"]],"^M",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]],"^U",["^N",[null,null,null]]],"^S",[["^P"],["^P","^12"],["^P","^12","^52"]],"^T",null,"^1@",3,"^U",["^N",[null,null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",3,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",369,"^F",369,"^Y",3,"^Z",true,"^M",["^N",[["^P"],["^P","^12"],["^P","^12","^52"]]],"^Q","if cur is in whitespace, deletes it optionally without ruining indentation."],"~$rest-of-siblings",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1290,"^E",7,"^F",1290,"^G",23,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/rest-of-siblings","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1290,"^W","^1=","^F",1290,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$start-of-a-string?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",497,"^E",7,"^F",497,"^G",25,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if at the start of a string."],"^5","~$paredit-cm.core/start-of-a-string?","^C","src/paredit_cm/core.cljs","^G",25,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",497,"^W","^14","^F",497,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if at the start of a string."],"~$bkwd-barf",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1945,"^E",7,"^F",1945,"^G",16,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for an ancestor opening bracket (parent,\n  grandparent, etc) that has a sibling to barf. returns... . nil if\n  there is no such anscestor that can barf"],"^5","~$paredit-cm.core/bkwd-barf","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1945,"^W",["^4",["^1=","^17","^18"]],"^F",1945,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for an ancestor opening bracket (parent,\n  grandparent, etc) that has a sibling to barf. returns... . nil if\n  there is no such anscestor that can barf"],"~$selection-completely-whitespace?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",841,"^E",7,"^F",841,"^G",39,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/selection-completely-whitespace?","^C","src/paredit_cm/core.cljs","^G",39,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",841,"^W",["^4",["^14","^18"]],"^F",841,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$betw-code-and-line-end?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",943,"^E",7,"^F",943,"^G",30,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","true if code is to the left and whitespace* is to the right.\n  assumes you already know line does not end with a comment."],"^5","~$paredit-cm.core/betw-code-and-line-end?","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",943,"^W",["^4",["^21","^14","^X","^18"]],"^F",943,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","true if code is to the left and whitespace* is to the right.\n  assumes you already know line does not end with a comment."],"~$backward-up-cur",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1668,"^E",7,"^F",1668,"^G",22,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","get cursor corresponding to paredit backward up","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/backward-up-cur","^C","src/paredit_cm/core.cljs","^G",22,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1668,"^F",1668,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","get cursor corresponding to paredit backward up"],"~$select-rest-of-siblings",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1297,"^E",7,"^F",1297,"^G",30,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/select-rest-of-siblings","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1297,"^W",["^4",["^X","^18"]],"^F",1297,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$forward-down-cur",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1829,"^E",7,"^F",1829,"^G",23,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/forward-down-cur","^C","src/paredit_cm/core.cljs","^G",23,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1829,"^F",1829,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]]],"~$uncomment",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",858,"^E",7,"^F",858,"^G",16,"^M",["^N",["^O",["^N",[["~$s"]]]]],"^Q","removes leading whitespace and semicolons from lines in 's'"],"^5","~$paredit-cm.core/uncomment","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["~$s"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",858,"^W","^2K","^F",858,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$s"]]]]],"^Q","removes leading whitespace and semicolons from lines in 's'"],"~$kill-rest-of-string",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1319,"^E",7,"^F",1319,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/kill-rest-of-string","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1319,"^W","^X","^F",1319,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$fwd-kill-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1416,"^E",7,"^F",1416,"^G",20,"^M",["^N",["^O",["^N",[["^P","~$mark","~$i","~$n"]]]]],"^Q","trampoline helper for forward-kill-word. 'mark' is the index to start killing\n  from. 'i' is the index we're inspecting. 'n' is how many calls remaining that\n  we'll support before stopping because of a suspected infinite loop. first call\n  can put the count of characters in this cm instance."],"^5","~$paredit-cm.core/fwd-kill-word","^C","src/paredit_cm/core.cljs","^G",20,"^S",["^N",[["^P","^7W","~$i","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1416,"^W",["^4",["^X","^2=","^17","^18"]],"^F",1416,"^Y",4,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^7W","~$i","~$n"]]]]],"^Q","trampoline helper for forward-kill-word. 'mark' is the index to start killing\n  from. 'i' is the index we're inspecting. 'n' is how many calls remaining that\n  we'll support before stopping because of a suspected infinite loop. first call\n  can put the count of characters in this cm instance."],"~$in-regular-string?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1234,"^E",7,"^F",1234,"^G",25,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if token is in the middle of a string."],"^5","~$paredit-cm.core/in-regular-string?","^C","src/paredit_cm/core.cljs","^G",25,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1234,"^W",["^4",["^14","^X"]],"^F",1234,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if token is in the middle of a string."],"~$indent-lines",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",866,"^E",7,"^F",866,"^G",19,"^M",["^N",["^O",["^N",[["^P","~$a","~$z"]]]]],"^Q","indents lines from a to z (line numbers). assumes a is before z."],"^5","~$paredit-cm.core/indent-lines","^C","src/paredit_cm/core.cljs","^G",19,"^S",["^N",[["^P","~$a","~$z"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",866,"^W","^18","^F",866,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$a","~$z"]]]]],"^Q","indents lines from a to z (line numbers). assumes a is before z."],"~$closer?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",81,"^E",7,"^F",81,"^G",14,"^M",["^N",["^O",["^N",[["~$s"]]]]]],"^5","~$paredit-cm.core/closer?","^C","src/paredit_cm/core.cljs","^G",14,"^S",["^N",[["~$s"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",81,"^W","^14","^F",81,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["~$s"]]]]]],"~$splice-sexp-killing-backward",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",44,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1728,"^F",1728,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit splice-sexp-killing-backward exposed for keymap. like emacs' version,\n  this doesn't actually kill to the clipboard. it just deletes. but unlink\n  emacs, this does not splice a string by dropping its double-quotes."],"^5","~$paredit-cm.core/splice-sexp-killing-backward","^C","src/paredit_cm/core.cljs","^G",44,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",1728,"^F",1728,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit splice-sexp-killing-backward exposed for keymap. like emacs' version,\n  this doesn't actually kill to the clipboard. it just deletes. but unlink\n  emacs, this does not splice a string by dropping its double-quotes."],"~$token",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",112,"^E",7,"^F",112,"^G",12,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","get token at cursor"],"^5","~$paredit-cm.core/token","^C","src/paredit_cm/core.cljs","^G",12,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",112,"^W","^X","^F",112,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","get token at cursor"],"~$closing-delim?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1094,"^E",7,"^F",1094,"^G",21,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true for closing brackets and for closing double-quotes"],"^5","~$paredit-cm.core/closing-delim?","^C","src/paredit_cm/core.cljs","^G",21,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1094,"^W",["^4",[null,"^14"]],"^F",1094,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true for closing brackets and for closing double-quotes"],"~$move-right",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1198,"^E",7,"^F",1198,"^G",17,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/move-right","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1198,"^W","^X","^F",1198,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$stringify",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",749,"^E",7,"^F",749,"^G",16,"^M",["^N",["^O",["^N",[["^P","~$cur-1","~$cur-2"]]]]],"^Q","turns the region from cur-1 to cur-2 into a string, escaping\n  backslashes and doublequotes"],"^5","~$paredit-cm.core/stringify","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P","^8<","^8="]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",749,"^W","^X","^F",749,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^8<","^8="]]]]],"^Q","turns the region from cur-1 to cur-2 into a string, escaping\n  backslashes and doublequotes"],"~$end-of-this",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1685,"^E",7,"^F",1685,"^G",18,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","go to the end of the current thing, whether it be a string or a word of code"],"^5","~$paredit-cm.core/end-of-this","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1685,"^W",["^4",["^X","^18"]],"^F",1685,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","go to the end of the current thing, whether it be a string or a word of code"],"~$comment?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1356,"^E",7,"^F",1356,"^G",15,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"^5","~$paredit-cm.core/comment?","^C","src/paredit_cm/core.cljs","^G",15,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1356,"^W","^14","^F",1356,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]]],"~$end-of-a-string?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",506,"^E",7,"^F",506,"^G",23,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if just to the right of a closing doublequote of a string."],"^5","~$paredit-cm.core/end-of-a-string?","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",506,"^W","^14","^F",506,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if just to the right of a closing doublequote of a string."],"~$end-of-next-sibling",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",611,"^E",7,"^F",611,"^G",26,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","get the cursor for the end of the sibling to the right.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/end-of-next-sibling","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",611,"^F",611,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","get the cursor for the end of the sibling to the right."],"~$forward-delete",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1201,"^E",16,"^F",1201,"^G",30,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit-forward-delete exposed for keymap"],"^5","~$paredit-cm.core/forward-delete","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1201,"^W",["^4",["^X","^2="]],"^F",1201,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit-forward-delete exposed for keymap"],"~$opening-delim-for-non-empty-pair?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1145,"^E",7,"^F",1145,"^G",40,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true for an opening bracket of a pair that contains one or more\n  chars."],"^5","~$paredit-cm.core/opening-delim-for-non-empty-pair?","^C","src/paredit_cm/core.cljs","^G",40,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1145,"^W",["^4",[null,"^14"]],"^F",1145,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true for an opening bracket of a pair that contains one or more\n  chars."],"~$create-line-comment",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",995,"^E",7,"^F",995,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","creates and indents a ;; comment"],"^5","~$paredit-cm.core/create-line-comment","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",995,"^W","^X","^F",995,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","creates and indents a ;; comment"],"~$delete-pair",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1192,"^E",7,"^F",1192,"^G",18,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes a pair of brackets surround the cursor. deletes the pair."],"^5","~$paredit-cm.core/delete-pair","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1192,"^W","^X","^F",1192,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes a pair of brackets surround the cursor. deletes the pair."],"~$backward-barf-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",34,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1963,"^F",1963,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit backward-barf-sexp exposed for keymap."],"^5","~$paredit-cm.core/backward-barf-sexp","^C","src/paredit_cm/core.cljs","^G",34,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1963,"^F",1963,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit backward-barf-sexp exposed for keymap."],"~$in-string?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",764,"^E",7,"^F",764,"^G",17,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","returns true if token is in the middle of a string.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/in-string?","^C","src/paredit_cm/core.cljs","^G",17,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^14"]],"^D",764,"^F",764,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","returns true if token is in the middle of a string."],"~$start-of-prev-sibling",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",725,"^E",7,"^F",725,"^G",28,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","return the cursor at the start of the sibling to the left.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/start-of-prev-sibling","^C","src/paredit_cm/core.cljs","^G",28,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I",["^4",["^X","^18"]]],["^ ","^1@",2,"^V",false,"^I",["^4",["^X","^18"]]]],"^D",725,"^F",725,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","return the cursor at the start of the sibling to the left."],"~$end-of-next-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1387,"^E",7,"^F",1387,"^G",23,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment or a string. returns the i at the end of\n  the next word (going to the right) in this comment/string"],"^5","~$paredit-cm.core/end-of-next-word","^C","src/paredit_cm/core.cljs","^G",23,"^S",["^N",[["^P","~$i"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1387,"^W","^1J","^F",1387,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","~$i"]]]]],"^Q","assumes i is in a comment or a string. returns the i at the end of\n  the next word (going to the right) in this comment/string"],"~$top-most-opener",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",2067,"^E",7,"^F",2067,"^G",22,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","get the top most opening bracket for the specified location. nil if\n  there is no such bracket.","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/top-most-opener","^C","src/paredit_cm/core.cljs","^G",22,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I",["^4",[null,"^17","^18"]]]],"^D",2067,"^F",2067,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","get the top most opening bracket for the specified location. nil if\n  there is no such bracket."],"~$opening-doublequote?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1109,"^E",7,"^F",1109,"^G",27,"^M",["^N",["^O",["^N",[["^P","^12"],["^P","^2J","~$left-char","^59"]]]]],"^Q","returns true if cur is just to the right of an opening doublequote","^1?",["^ ","^V",false,"^1@",4,"^Y",4,"^S",[["^P","^12"],["^P","^2J","^8Z","^59"]],"^M",["^N",[["^P","^12"],["^P","^2J","^8Z","^59"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/opening-doublequote?","^C","src/paredit_cm/core.cljs","^G",27,"^1?",["^ ","^V",false,"^1@",4,"^Y",4,"^S",[["^P","^12"],["^P","^2J","^8Z","^59"]],"^M",["^N",[["^P","^12"],["^P","^2J","^8Z","^59"]]],"^U",["^N",[null,null]]],"^S",[["^P","^12"],["^P","^2J","^8Z","^59"]],"^T",null,"^1@",4,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",2,"^V",false,"^I","^X"],["^ ","^1@",4,"^V",false,"^I",["^4",[null,"^14"]]]],"^D",1109,"^F",1109,"^Y",4,"^Z",true,"^M",["^N",[["^P","^12"],["^P","^2J","^8Z","^59"]]],"^Q","returns true if cur is just to the right of an opening doublequote"],"~$uncomment-selection",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",872,"^E",7,"^F",872,"^G",26,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","removes whitespace and leading semicolons from selection, replaces\n  selection with the result, indents lines affected."],"^5","~$paredit-cm.core/uncomment-selection","^C","src/paredit_cm/core.cljs","^G",26,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",872,"^W","^18","^F",872,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","removes whitespace and leading semicolons from selection, replaces\n  selection with the result, indents lines affected."],"~$at-a-word?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",484,"^E",7,"^F",484,"^G",17,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if at a word of code"],"^5","~$paredit-cm.core/at-a-word?","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",484,"^W","^14","^F",484,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if at a word of code"],"~$bkwd-down",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1844,"^E",7,"^F",1844,"^G",16,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for the cursor where we'd be if we went backward\n  and then down into the prev sibling that is available. nil if there is no\n  sibling to enter."],"^5","~$paredit-cm.core/bkwd-down","^C","src/paredit_cm/core.cljs","^G",16,"^S",["^N",[["^P","^12","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1844,"^W",["^4",["^X","^17","^18"]],"^F",1844,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12","~$n"]]]]],"^Q","trampoline-able that looks for the cursor where we'd be if we went backward\n  and then down into the prev sibling that is available. nil if there is no\n  sibling to enter."],"~$char-count",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",87,"^E",7,"^F",87,"^G",17,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns the number of characters in the code mirror instance"],"^5","~$paredit-cm.core/char-count","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",87,"^W","^1J","^F",87,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns the number of characters in the code mirror instance"],"~$select-pair",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1182,"^E",7,"^F",1182,"^G",18,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes a pair of brackets surround the cursor. selects the pair."],"^5","~$paredit-cm.core/select-pair","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1182,"^W","^X","^F",1182,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","assumes a pair of brackets surround the cursor. selects the pair."],"~$start-of-comment?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1360,"^E",7,"^F",1360,"^G",24,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if block cursor is on the first ; of a line comment"],"^5","~$paredit-cm.core/start-of-comment?","^C","src/paredit_cm/core.cljs","^G",24,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1360,"^W","^14","^F",1360,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","true if block cursor is on the first ; of a line comment"],"~$comment-or-string?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",176,"^E",7,"^F",176,"^G",25,"^M",["^N",["^O",["^N",[["^2J"]]]]],"^Q","true if the type is comment or string. a lot of editing behavior (like\n  movement and deletion) is similar when you are in a string or in a comment, so\n  often this is the predicate for that behavior."],"^5","~$paredit-cm.core/comment-or-string?","^C","src/paredit_cm/core.cljs","^G",25,"^S",["^N",[["^2J"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",176,"^W","^14","^F",176,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^2J"]]]]],"^Q","true if the type is comment or string. a lot of editing behavior (like\n  movement and deletion) is similar when you are in a string or in a comment, so\n  often this is the predicate for that behavior."],"~$token-start",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",289,"^E",7,"^F",289,"^G",18,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns the cursor for the start of the current token"],"^5","~$paredit-cm.core/token-start","^C","src/paredit_cm/core.cljs","^G",18,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",289,"^W","^X","^F",289,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns the cursor for the start of the current token"],"~$meta-doublequote",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",772,"^E",16,"^F",772,"^G",32,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit meta-doublequote exposed for keymap.\n  if in a string, moves cursor out of the string to the right.\n  if in a comment, insert a doublequote.\n  if in an escaped char, do nothing.\n  otherwise starts a string that that continues to the end of the next\n  form, escaping backslashes and doublequotes."],"^5","~$paredit-cm.core/meta-doublequote","^C","src/paredit_cm/core.cljs","^G",32,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",772,"^W",["^4",["^X","^2=","^18"]],"^F",772,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit meta-doublequote exposed for keymap.\n  if in a string, moves cursor out of the string to the right.\n  if in a comment, insert a doublequote.\n  if in an escaped char, do nothing.\n  otherwise starts a string that that continues to the end of the next\n  form, escaping backslashes and doublequotes."],"~$escaped-char-to-left?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",198,"^E",7,"^F",198,"^G",28,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if an escaped char and its backslash are to the left"],"^5","~$paredit-cm.core/escaped-char-to-left?","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",198,"^W","^14","^F",198,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns true if an escaped char and its backslash are to the left"],"~$last-token",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",134,"^E",7,"^F",134,"^G",17,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns the last token of a line"],"^5","~$paredit-cm.core/last-token","^C","src/paredit_cm/core.cljs","^G",17,"^S",["^N",[["^P","^12"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",134,"^W",["^4",["^X","^18"]],"^F",134,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^12"]]]]],"^Q","returns the last token of a line"],"~$backward-slurp-sexp",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",35,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1883,"^F",1883,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit backward-slurp-sexp exposed for keymap."],"^5","~$paredit-cm.core/backward-slurp-sexp","^C","src/paredit_cm/core.cljs","^G",35,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1883,"^F",1883,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit backward-slurp-sexp exposed for keymap."],"~$openers",["^ ","^5","~$paredit-cm.core/openers","^C","src/paredit_cm/core.cljs","^D",69,"^E",1,"^F",69,"^G",13,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",69,"^E",6,"^F",69,"^G",13],"^I","^J"],"~$wrap-round",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",1692,"^F",1692,"^M",["^N",["^O",["^N",[["^P"],["^P","^12"]]]]],"^Q","paredit wrap-round exposed for keymap."],"^5","~$paredit-cm.core/wrap-round","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","^12"]],"^M",["^N",[["^P"],["^P","^12"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","^12"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1692,"^F",1692,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","^12"]]],"^Q","paredit wrap-round exposed for keymap."],"~$right",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",800,"^E",7,"^F",800,"^G",12,"^M",["^N",["^O",["^N",[["^P","^2T","^2U"]]]]],"^Q","given a pair of cursors c1 and c2, returns the right-most one"],"^5","~$paredit-cm.core/right","^C","src/paredit_cm/core.cljs","^G",12,"^S",["^N",[["^P","^2T","^2U"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",800,"^F",800,"^Y",3,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^2T","^2U"]]]]],"^Q","given a pair of cursors c1 and c2, returns the right-most one"],"~$line-ends-with-comment?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",905,"^E",7,"^F",905,"^G",30,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","true if the line ends with a comment"],"^5","~$paredit-cm.core/line-ends-with-comment?","^C","src/paredit_cm/core.cljs","^G",30,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",905,"^W","^14","^F",905,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","true if the line ends with a comment"],"~$bkwd-kill-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1500,"^E",7,"^F",1500,"^G",21,"^M",["^N",["^O",["^N",[["^P","^7W","~$i","~$n"]]]]],"^Q","trampoline helper for backward-kill-word. 'mark' is the index to start\n  killing from. 'i' is the index we're inspecting. 'n' is how many more calls\n  we'll entertain before stopping because we suspect an infinite loop. first\n  call can use char count for 'n'."],"^5","~$paredit-cm.core/bkwd-kill-word","^C","src/paredit_cm/core.cljs","^G",21,"^S",["^N",[["^P","^7W","~$i","~$n"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1500,"^W",["^4",["^X","^2=","^17","^18"]],"^F",1500,"^Y",4,"^Z",true,"^M",["^N",["^O",["^N",[["^P","^7W","~$i","~$n"]]]]],"^Q","trampoline helper for backward-kill-word. 'mark' is the index to start\n  killing from. 'i' is the index we're inspecting. 'n' is how many more calls\n  we'll entertain before stopping because we suspect an infinite loop. first\n  call can use char count for 'n'."],"~$in-whitespace?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1031,"^E",7,"^F",1031,"^G",21,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if token is to the right of whitespace"],"^5","~$paredit-cm.core/in-whitespace?","^C","src/paredit_cm/core.cljs","^G",21,"^S",["^N",[["^P"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1031,"^W","^14","^F",1031,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","returns true if token is to the right of whitespace"],"~$close-brace",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",431,"^E",16,"^F",431,"^G",27,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","close curly brace like close-rond"],"^5","~$paredit-cm.core/close-brace","^C","src/paredit_cm/core.cljs","^G",27,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",431,"^W",["^4",["^X","^18"]],"^F",431,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","close curly brace like close-rond"],"~$open-square",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",449,"^E",17,"^F",449,"^G",28,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"^5","~$paredit-cm.core/open-square","^C","src/paredit_cm/core.cljs","^G",28,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",449,"^W","^X","^F",449,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]]],"~$forward-kill-word",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1458,"^E",16,"^F",1458,"^G",33,"^1A",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit forward-kill-word exposed for keymap."],"^5","~$paredit-cm.core/forward-kill-word","^C","src/paredit_cm/core.cljs","^G",33,"^S",["^N",[["^P"]]],"^T",null,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",1458,"^W","^X","^F",1458,"^Y",1,"^Z",true,"^M",["^N",["^O",["^N",[["^P"]]]]],"^Q","paredit forward-kill-word exposed for keymap."],"~$backspace",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",1075,"^E",7,"^F",1075,"^G",16,"^M",["^N",["^O",["^N",[["^P"],["^P","~$n"]]]]],"^Q","delete 1 or n char to left","^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$n"]],"^M",["^N",[["^P"],["^P","~$n"]]],"^U",["^N",[null,null]]]],"^5","~$paredit-cm.core/backspace","^C","src/paredit_cm/core.cljs","^G",16,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$n"]],"^M",["^N",[["^P"],["^P","~$n"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","~$n"]],"^T",null,"^1@",2,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",1075,"^F",1075,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","~$n"]]],"^Q","delete 1 or n char to left"],"~$pair?",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^D",75,"^E",7,"^F",75,"^G",12,"^M",["^N",["^O",["^N",[["~$s1","~$s2"]]]]],"^Q","true if the two strings are a matching open/close pair "],"^5","~$paredit-cm.core/pair?","^C","src/paredit_cm/core.cljs","^G",12,"^S",["^N",[["^:1","^:2"]]],"^T",null,"^U",["^N",[null,null]],"^E",1,"^V",false,"^D",75,"^W","^14","^F",75,"^Y",2,"^Z",true,"^M",["^N",["^O",["^N",[["^:1","^:2"]]]]],"^Q","true if the two strings are a matching open/close pair "],"~$open-round",["^ ","^L",null,"^H",["^ ","^C","/Users/acheng/git/other/paredit-cm/src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$c"]],"^M",["^N",[["^P"],["^P","~$c"]]],"^U",["^N",[null,null]]],"^1A",true,"^E",16,"^D",223,"^F",223,"^M",["^N",["^O",["^N",[["^P"],["^P","~$c"]]]]],"^Q","paredit-open-round exposed for keymap. unlike traditional emacs paredit, this\n  supports brackets [] {} () but not double-quote"],"^5","~$paredit-cm.core/open-round","^C","src/paredit_cm/core.cljs","^G",26,"^1?",["^ ","^V",false,"^1@",2,"^Y",2,"^S",[["^P"],["^P","~$c"]],"^M",["^N",[["^P"],["^P","~$c"]]],"^U",["^N",[null,null]]],"^S",[["^P"],["^P","~$c"]],"^T",null,"^1@",2,"^1A",true,"^U",["^N",[null,null]],"^E",1,"^V",false,"^1C",[["^ ","^1@",1,"^V",false,"^I","^X"],["^ ","^1@",2,"^V",false,"^I","^X"]],"^D",223,"^F",223,"^Y",2,"^Z",true,"^M",["^N",[["^P"],["^P","~$c"]]],"^Q","paredit-open-round exposed for keymap. unlike traditional emacs paredit, this\n  supports brackets [] {} () but not double-quote"]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["~:yes","~:bof","~:else","~:top","~:cur","~:default","~:right-char","~:start-of-this-tok","~:mode","~:start","~:left-char","~:type","~:string","~:ch","~:stop","^D","~:end-of-this-token","~:tok","~:left-cur","~:do-nothing","~:end","~:eof","~:i","~:right-cur"]],"~:order",["^:;","^:=","^:>","^:@","^:B","^:C","^:D","^:E","^:F","^:G","^D","^:J","^:K","^:M","^:N","~:i","^:O","^:<","^::","^:?","^:H","^:I","^:A","^:L"]],"^Q","paredit operations (exported)","~:as-aliases",["^ "]]